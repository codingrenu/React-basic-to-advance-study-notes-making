
react is a frontend purpose javascript library so backend work arecreted in 

api request based work.

react app server.

form .....>server  POST

server to give ...>>>Get

update.......put

delete......delete.


this api is creted for simple 

        add user , update, delete this kind of work doing 


is mainly use in 


             json.placeholderfake api use ....
             to cretethe api 


/.......using api create using command

        npm i@blueprintjs/core .....and some packages install is mainly 


used in {
    import { Button, EditableText, InputGroup, Toaster } from '@blueprintjs/core';
import './App.css';

const AppToaster = Toaster.create({
    position: "top"

    .....these purpose...
}



and some index.css can import some api styling codes.....





code step by step start....

01.....


these code can mainly understanding these parts..


01....add new user using json placeholder.


these code use trim function data can arranged in same order.


{
    the using fetch post datas encoding and 
    
    application.json;charset- "UTF-8" Toaster message can display and timeout

    seconds use in the add user.
}

function addUser() {
        const name = newName.trim();
        const email = newEmail.trim();
        const website = newWebsite.trim();

        if (name && email && website) {
            fetch("https://jsonplaceholder.typicode.com/users",
                {
                    method: "POST",
                    body: JSON.stringify({
                        name,
                        email,
                        website
                    }),
                    headers: {
                        "Content-Type": "application/json; charset=UTF-8 "
                    }
                }
            ).then((response) => response.json() )
            .then(data => {
                setUsers([...users, data]);
                AppToaster.show({
                    message: "user added successfully",
                    intent: 'success',
                    timeout: 3000
                })
                setNewName("");
                setNewEmail("");
                setNewWebsite("");

            })
        }

    }

//02.....useeffect function use to import json code fake api webite.

useEffect(() => {
        fetch('https://jsonplaceholder.typicode.com/users')
        .then((response) => response.json() )
        .then((json) => setUsers(json))
    },[])


//03....update user.

using get type request

fetch(`https://jsonplaceholder.typicode.com/users/10`,



function updateUser(id) {
        const user = users.find((user) => user.id === id );
        fetch(`https://jsonplaceholder.typicode.com/users/10`,
                {
                    method: "PUT",
                    body: JSON.stringify(user),
                    headers: {
                        "Content-Type": "application/json; charset=UTF-8 "
                    }
                }
            )
        .then( response => response.json())    
        .then(data => {
                AppToaster.show({
                    message: "user updated successfully",
                    intent: 'success',
                    timeout: 3000
                })

        })

    }


//04...editable text using this function:

function onChangeHandler(id, key, value) {
        setUsers((users) => {
            return users.map(user => {
                return user.id === id ? {...user, [key]: value } : user;
            })
        })
    }

<td><EditableText onChange={value => onChangeHandler(user.id, 'email',  value)} value={user.email} /></td>
                        <td><EditableText onChange={value => onChangeHandler(user.id, 'website',  value)} value={user.website}/></td>



//05... deleteUser
{

method only use inside the object filterfunction is used 
}


function deleteUser(id) {
        fetch(`https://jsonplaceholder.typicode.com/users/${id}`,
        {
            method: "DELETE",
        })
        .then( response => response.json())    
        .then(data => {
                setUsers((users) => {
                    return users.filter(user => user.id !== id)
                })

                AppToaster.show({
                    message: "user deleted successfully",
                    intent: 'success',
                    timeout: 3000
                })

        })
    }

//06....toaster coding is show the pop is mainly use..

const AppToaster = Toaster.create({
    position: "top"
})



.....................xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx..............



fullcode can listed below:





01//import the three is important of api create.

import { useEffect, useState } from 'react';
import { Button, EditableText, InputGroup, Toaster } from '@blueprintjs/core';
import './App.css';

const AppToaster = Toaster.create({
    position: "top"
})

function App() {
    const [users, setUsers] = useState([]);
    const [newName, setNewName] = useState("")
    const [newEmail, setNewEmail] = useState("")
    const [newWebsite, setNewWebsite] = useState("")


    useEffect(() => {
        fetch('https://jsonplaceholder.typicode.com/users')
        .then((response) => response.json() )
        .then((json) => setUsers(json))
    },[])

    function addUser() {
        const name = newName.trim();
        const email = newEmail.trim();
        const website = newWebsite.trim();

        if (name && email && website) {
            fetch("https://jsonplaceholder.typicode.com/users",
                {
                    method: "POST",
                    body: JSON.stringify({
                        name,
                        email,
                        website
                    }),
                    headers: {
                        "Content-Type": "application/json; charset=UTF-8 "
                    }
                }
            ).then((response) => response.json() )
            .then(data => {
                setUsers([...users, data]);
                AppToaster.show({
                    message: "user added successfully",
                    intent: 'success',
                    timeout: 3000
                })
                setNewName("");
                setNewEmail("");
                setNewWebsite("");

            })
        }

    }

    function onChangeHandler(id, key, value) {
        setUsers((users) => {
            return users.map(user => {
                return user.id === id ? {...user, [key]: value } : user;
            })
        })
    }

    function updateUser(id) {
        const user = users.find((user) => user.id === id );
        fetch(`https://jsonplaceholder.typicode.com/users/10`,
                {
                    method: "PUT",
                    body: JSON.stringify(user),
                    headers: {
                        "Content-Type": "application/json; charset=UTF-8 "
                    }
                }
            )
        .then( response => response.json())    
        .then(data => {
                AppToaster.show({
                    message: "user updated successfully",
                    intent: 'success',
                    timeout: 3000
                })

        })

    }

    function deleteUser(id) {
        fetch(`https://jsonplaceholder.typicode.com/users/${id}`,
        {
            method: "DELETE",
        })
        .then( response => response.json())    
        .then(data => {
                setUsers((users) => {
                    return users.filter(user => user.id !== id)
                })

                AppToaster.show({
                    message: "user deleted successfully",
                    intent: 'success',
                    timeout: 3000
                })

        })
    }

  return (
    <div className="App">
        <table className='bp4-html-table modifier'>
            <thead>
                <th>ID</th>
                <th>Name</th>
                <th>Email</th>
                <th>Website</th>
                <th>Action</th>
            </thead>
            <tbody>
                {users.map(user => 
                    <tr key={user.id}>
                        <td>{user.id}</td>
                        <td>{user.name}</td>
                        <td><EditableText onChange={value => onChangeHandler(user.id, 'email',  value)} value={user.email} /></td>
                        <td><EditableText onChange={value => onChangeHandler(user.id, 'website',  value)} value={user.website}/></td>
                        <td>
                            <Button intent='primary' onClick={() => updateUser(user.id)}>Update</Button>
                            &nbsp;
                            <Button intent='danger' onClick={() => deleteUser(user.id)} >Delete</Button>
                        </td>
                    </tr>
                )}
            </tbody>
            <tfoot>
                <tr>
                    <td></td>
                    <td>
                        <InputGroup
                            value={newName}
                            onChange={(e) => setNewName(e.target.value) }
                            placeholder='Enter Name...'
                        />
                    </td>
                    <td>
                        <InputGroup
                            value={newEmail}
                            onChange={(e) => setNewEmail(e.target.value) }
                            placeholder='Enter Email...'
                        />
                    </td>
                    <td>
                        <InputGroup
                            value={newWebsite}
                            onChange={(e) => setNewWebsite(e.target.value) }
                            placeholder='Enter Website...'
                        />
                    </td>
                    <td>
                        <Button intent='success' onClick={addUser}>Add User</Button>
                    </td>
                </tr>
            </tfoot>
        </table>
    </div>
  );
}

export default App;
